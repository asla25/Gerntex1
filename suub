<!DOCTYPE html>
<html lang="ar">
<head>
<meta charset="UTF-8" />
<title>سابواي الجاهلية - أنمي كيوت موديل</title>
<meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" />
<style>
  body,html{margin:0;padding:0;overflow:hidden;background:#87ceeb;}
  #menu{
    position:absolute;width:100%;height:100%;background:#222a;display:flex;flex-direction:column;justify-content:center;align-items:center;color:#0ff;text-shadow:0 0 15px #0ffaa;
    user-select:none;
    z-index:20;
  }
  #menu h1{font-size:4rem;margin-bottom:15px;font-weight:900;letter-spacing:6px;}
  #menu p{font-size:1.2rem;margin-bottom:30px;font-weight:600;color:#0aa;}
  #menu button{
    font-size:1.8rem;padding:18px 50px;background:#0ff;border:none;border-radius:25px;color:#022;cursor:pointer;box-shadow:0 0 30px #0ffbb;transition:0.3s ease;
  }
  #menu button:hover{background:#0aac;transform:scale(1.05);}
  canvas{display:block;}
  #score{position:absolute;top:12px;left:12px;color:#fff;font-size:1.8rem;font-weight:bold;text-shadow:0 0 8px #00ffffcc;}
  #gameover{position:absolute;top:50%;left:50%;transform:translate(-50%,-50%);color:#f44;font-size:4rem;font-weight:bold;text-shadow:0 0 20px #f44;display:none;user-select:none;}
</style>
</head>
<body>

<div id="menu">
  <h1>سابواي الجاهلية</h1>
  <p>© Oreoo 2025</p>
  <button id="startBtn">إبدأ اللعب</button>
</div>
<div id="score">العملات: 0</div>
<div id="gameover">خسرت! اضغط لإعادة اللعب</div>

<script src="https://cdn.jsdelivr.net/npm/three@0.160.0/build/three.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/three@0.160.0/examples/js/loaders/GLTFLoader.js"></script>
<script>
let scene, camera, renderer, player, floorSegments=[], obstacles=[], coins=[];
let speed = 0.5;
const groundLevel = 0.5;
const lanesX = [-4, 0, 4];
let currentLane = 1;
let jumping = false, jumpSpeed = 0;
let gameStarted = false;
let coinsCount = 0;
let gameOver = false;

const menu = document.getElementById('menu');
const startBtn = document.getElementById('startBtn');
const scoreElem = document.getElementById('score');
const gameOverElem = document.getElementById('gameover');

startBtn.onclick = () => {
  menu.style.display = 'none';
  if(!gameStarted){
    init();
    animate();
    gameStarted = true;
  }
};

gameOverElem.onclick = () => {
  location.reload();
};

function init(){
  scene = new THREE.Scene();
  scene.fog = new THREE.Fog(0x87ceeb, 10, 70);

  camera = new THREE.PerspectiveCamera(75, window.innerWidth/window.innerHeight, 0.1, 1000);
  camera.position.set(0, 6, 12);
  camera.lookAt(0, 0, 0);

  renderer = new THREE.WebGLRenderer({antialias:true});
  renderer.setSize(window.innerWidth, window.innerHeight);
  renderer.setClearColor(0x87ceeb);
  document.body.appendChild(renderer.domElement);

  window.addEventListener('resize', () => {
    camera.aspect = window.innerWidth/window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  });

  // الشارع
  for(let i=0; i<15; i++){
    const roadMat = new THREE.MeshStandardMaterial({color: 0x222222});
    const road = new THREE.Mesh(new THREE.BoxGeometry(12, 0.25, 20), roadMat);
    road.position.z = -i*20;
    road.position.y = 0;
    scene.add(road);
    floorSegments.push(road);

    const lineMat = new THREE.MeshStandardMaterial({color: 0xffffff});
    for(let lane=0; lane<4; lane++){
      const line = new THREE.Mesh(new THREE.BoxGeometry(0.3, 0.07, 6), lineMat);
      line.position.set(-6 + (lane+1)*3, 0.13, road.position.z - 5);
      scene.add(line);
    }
  }

  const light = new THREE.DirectionalLight(0xffffff, 1.3);
  light.position.set(5, 15, 10);
  scene.add(light);

  loadPlayerModel();

  createObstacles();
  createCoins();
  setupControls();
}

function loadPlayerModel(){
  const loader = new THREE.GLTFLoader();
  // موديل انمي كيوت مجاني من هنا:
  // https://github.com/KhronosGroup/glTF-Sample-Models/tree/master/2.0/SimpleSkin
  loader.load(
    'https://raw.githubusercontent.com/KhronosGroup/glTF-Sample-Models/master/2.0/SimpleSkin/glTF/SimpleSkin.gltf',
    gltf => {
      player = gltf.scene;
      player.scale.set(2,2,2);
      player.position.set(lanesX[currentLane], 0, 0);
      scene.add(player);
    },
    undefined,
    error => {
      console.error('Error loading model:', error);
      createSimplePlayer(); // fallback
    }
  );
}

function createSimplePlayer(){
  const bodyMat = new THREE.MeshStandardMaterial({color: 0xffa3c4});
  const body = new THREE.Mesh(new THREE.SphereGeometry(0.6, 32, 32), bodyMat);
  body.position.y = groundLevel + 0.6;

  const hairMat = new THREE.MeshStandardMaterial({color: 0x9b59b6});
  const hair = new THREE.Mesh(new THREE.SphereGeometry(0.4, 32, 32), hairMat);
  hair.position.y = groundLevel + 1.35;

  const eyeMat = new THREE.MeshStandardMaterial({color: 0x000000});
  const eyeL = new THREE.Mesh(new THREE.SphereGeometry(0.12, 16, 16), eyeMat);
  eyeL.position.set(-0.2, groundLevel + 1.3, 0.5);
  const eyeR = new THREE.Mesh(new THREE.SphereGeometry(0.12, 16, 16), eyeMat);
  eyeR.position.set(0.2, groundLevel + 1.3, 0.5);

  player = new THREE.Group();
  player.add(body);
  player.add(hair);
  player.add(eyeL);
  player.add(eyeR);
  player.position.y = 0;
  player.position.x = lanesX[currentLane];
  scene.add(player);
}

function createObstacles() {
  obstacles.forEach(o => scene.remove(o));
  obstacles = [];

  const bumpColors = [0xff6f61, 0xffcc5c, 0x88d8b0, 0xff6f61];
  const carColors = [0xff3f34, 0x34ff68, 0x3498db, 0xffd93d];

  for(let i=0; i<20; i++){
    const lane = Math.floor(Math.random()*3);
    const isBump = Math.random() < 0.5;

    if(isBump) {
      const bumpMat = new THREE.MeshStandardMaterial({color: bumpColors[Math.floor(Math.random()*bumpColors.length)]});
      const bump = new THREE.Mesh(new THREE.CylinderGeometry(1,1,0.5,20,1,false), bumpMat);
      bump.rotation.x = Math.PI / 2;
      bump.position.set(lanesX[lane], groundLevel + 0.25, -Math.random()*400 - 30);
      scene.add(bump);
      obstacles.push(bump);
    } else {
      const carMat = new THREE.MeshStandardMaterial({color: carColors[Math.floor(Math.random()*carColors.length)]});
      const car = new THREE.Mesh(new THREE.BoxGeometry(2, 0.8, 4), carMat);
      car.position.set(lanesX[lane], groundLevel + 0.4, -Math.random()*400 - 30);
      scene.add(car);
      obstacles.push(car);
    }
  }
}

function createCoins(){
  coins.forEach(c => scene.remove(c));
  coins = [];

  const coinMat = new THREE.MeshStandardMaterial({color: 0xffd700, emissive: 0xffff00});
  for(let i=0; i<30; i++){
    const lane = Math.floor(Math.random()*3);
    const coin = new THREE.Mesh(new THREE.TorusGeometry(0.25, 0.1, 16, 100), coinMat);
    coin.position.set(lanesX[lane], groundLevel + 0.8, -Math.random()*400 - 30);
    coin.rotation.x = Math.PI/2;
    scene.add(coin);
    coins.push(coin);
  }
}

function setupControls() {
  let touchStartX = 0;
  let touchStartY = 0;
  window.addEventListener('touchstart', e => {
    touchStartX = e.touches[0].clientX;
    touchStartY = e.touches[0].clientY;
  });
  window.addEventListener('touchend', e => {
    const deltaX = e.changedTouches[0].clientX - touchStartX;
    const deltaY = e.changedTouches[0].clientY - touchStartY;
    if(Math.abs(deltaX) > Math.abs(deltaY)){
      if(deltaX > 50) moveRight();
      else if(deltaX < -50) moveLeft();
    } else {
      if(deltaY < -50) jump();
    }
  });
  window.addEventListener('keydown', e => {
    if(e.code === 'ArrowRight') moveRight();
    else if(e.code === 'ArrowLeft') moveLeft();
    else if(e.code === 'ArrowUp') jump();
  });
}

function moveRight() {
  if(currentLane < lanesX.length-1){
    currentLane++;
    if(player) player.position.x = lanesX[currentLane];
  }
}
function moveLeft() {
  if(currentLane > 0){
    currentLane--;
    if(player) player.position.x = lanesX[currentLane];
  }
}

function jump() {
  if(!jumping){
    jumping = true;
    jumpSpeed = 0.15;
  }
}

function collide(a, b, dist=1){
  const dx = a.position.x - b.position.x;
  const dz = a.position.z - b.position.z;
  const dy = a.position.y - b.position.y;
  return (Math.abs(dx) < dist && Math.abs(dz) < dist*1.5 && Math.abs(dy) < 1);
}

function animate(){
  if(gameOver) return;
requestAnimationFrame(animate);

  if(player){
    // قفز اللاعب
    if(jumping){
      player.position.y += jumpSpeed;
      jumpSpeed -= 0.01;
      if(player.position.y <= 0){
        player.position.y = 0;
        jumping = false;
      }
    }

    // تحريك الأرض والعقبات
    floorSegments.forEach(seg => {
      seg.position.z += speed;
      if(seg.position.z > 20) seg.position.z -= 300;
    });

    obstacles.forEach(obj => {
      obj.position.z += speed;
      if(obj.position.z > 20) obj.position.z -= 450;
    });

    // تحريك العملات وتدويرها
    coins.forEach(coin => {
      coin.position.z += speed;
      if(coin.position.z > 20) coin.position.z -= 450;
      coin.rotation.z += 0.1;
      // تصادم مع اللاعب
      if(collide(player, coin, 1)){
        coinsCount++;
        scoreElem.textContent = 'العملات: ' + coinsCount;
        scene.remove(coin);
        coins = coins.filter(c => c !== coin);
      }
    });

    // تصادم مع العوائق (موت)
    for(let i=0; i<obstacles.length; i++){
      if(collide(player, obstacles[i], 1)){
        gameOver = true;
        gameOverElem.style.display = 'block';
        break;
      }
    }
  }

  renderer.render(scene, camera);
}
</script>

</body>
</html>s
